Oplossing oefeningen: https://github.com/pvoosten/CSharpDatabanken

Scalaire functie = Functie die 1 argument en 1 resultaat geeft. Voorbeeld:
	SQRT(4) = 2
Select is altijd de laatse stap in een statement. Deze bepaald welke kolommen er in het resultaat zullen zitten. (hoewel deze als eerste genoteerd is)
Select in een select enkel mogelijk wanneer de geneste select altijd 1 rij en 1 kolom als resutaat heeft.
From clause die specifieert een tabel, een select of een view, of een combinatie van de vorige.
View (Variabele) = select statement die opgelslaan is in de database. (ddl) Voorbeeld:
	CREATE VEIW [klantenUitBelgie]
	AS
	SELECT * FROM Customer
	WHERE Customer.Country = 'Belgium';
Views gebruiken als "from" in een SELECT statement. Voorbeeld:
	SELECT City
	From klantenUitBelgie
Select nesting in FROM clause. Voorbeeld:
	SELECT * 
	FROM (
		SELECT 123 AS getal
		) AS getallen1
	) AS getallen2

Performantie = aantal geheugen nodig om een statement uit te voeren (te controleren via een profiler) (vooral bij diep nesting in de FROM clause).
Execution plan (eenvoudige profiler) = Alle stappen die uitgevoerd worden om van een query een resultaat te bekomen. 
Natural join = inner join tussen 2 tabellen waar 2 kolommen met dezelfde naam gemerged worden.
SELECT TOP 10 * = geeft de eerste 10 resultaten. Wanneer dit gecombineerd is met een order by, wordt de "TOP" eerste uitgevoerd.
Union = operator die het resultaat van 2 statements combineert in 1 kolom, Hier kunnen geen dubbels in zitten (net zoals distinct) Voorbeeld:
	SELECT 123 as Alpha
	UNION
	SELECT 456 as Beta

De naam vd kolom is Alpha want dat is de alias van de eerste SELECT
EXCEPT = operator die het resultaat van SELECT 1 verminderd met het resultaat van SELECT 2.
INTERSECT = Operator die enkel het resultaat geeft die in beide alle SELECT's voorkomen (gemeenschappelijk zijn in alle SELECT's).
Kansberekening met deze operatoren. Voorbeeld:
SELECT *
FROM
(SELECT 1 c3 UNION SELECT 0) AS cijfer3
, (SELECT 1 c2 UNION SELECT 0) AS cijfer2
, (SELECT 1 c1 UNION SELECT 0) AS cijfer1
, (SELECT 1 c3 UNION SELECT 0) AS cijfer0
Dit zal alle mogelijke combinaties van 4 letters die 0/1 kunnen zijn weergeven.

GROUP BY = resultaat splitsen in groepen waarbij elke record maar 1 keer kan voorkomen (ingebouwde distinct) (creeert een groep waar bepaalde functies kunnen op uitgevoerd worden).
Op deze groepen kan je geen WHERE gebruiken maar gebruik je HAVING
Wanneer de eerste SELECT statement een WHERE clause heeft en een GROUP BY dan zal de WHERE clause eerst gebeuren en dan pas de GROUP BY. (alles weggefilterd door WHERE komt niet in de resulterende groepen terect)
Wanneer er iets in de GROUP BY clause staat dan kan deze ook in de SELECT komen, omgekeerd gaat niet.
ORDER BY kan je ook gebruiken om de groepen te groeperen.
Voorbeeld:
	SELECT FirstName
		, COUNT(*)
	FROM Customer
	WHERE LastName <> 'Philips'
	GROUP BY FirstName
	HAVING COUNT(*) > 1

Aggregate Funtions = Functies die 1 argument vereisen maar deze waarde moet een kolom zijn en Geeft 1 resultaat. Voorbeeld:
	AVG(Tabel X) die vraagt een kolom en zal daar dan het gemiddelde van returnen.

View is een veriabele in SQL waar een statement in is opgeslagen. Voorbeeld:
	Create view [Naam]

Volgorde uitvoering commando's = From, Where, Group by, Having, Order by, Select

Constraint: een statement waaraan de data in een table moet aan voldoen. Gebruikt in een CREATE TABLE statement

Resultaat van ee Query kan je omkeren door WHERE NOT ipv WHERE te gebruiken.

Normalisatie sql databases zie uitleg op engelstalige wikipedia.(verschillende normaalvormen)

Redundancie: gegevens komen meerder keren voor (op een andere manier), kan problemen geven bij relationele databases. Bijvoorbeeld: iemand is verhuist en zn adres moet gewijzigt worden.

Super sleutel: Een combinatie van 1 of meerdere kolommen waar je aan de hand van alle info in de rij kent.
Kandidaat sleutel: een supersleutel waar je geen kolom meer kan wegnemen om nog steeds een super sleutel te zijn. Uit deze kandidaat sleutels kies je de beste sleutel (primaire).
Primaire sleutel: Een kolom of een combinatie van kolommen die elke waarde in elke kolom uniek kan identificeren.

Voor de eindopracht zal je alle kandidaat sleutels moeten aanduiden6

Compositieve sleutel: Een sleutel die uit een combinatie van kolommen bestaat.
Unieke sleutel: Combinatie van kolomen die altijd uniek zullen zijn.
Foreing sleutel: 1 of meerdere kolommen uit een tabel verwijst naar de primaire sleutel van andere tabel.

Voorbeel creeren tabel met primary key:
	CREATE TABLE [dbo].ToothbrushModels (
		[ModelId] INT NOT NULL PRIMARY KEY
		,[Manufacturer] NCHAR(50) NOT NULL
		,[Model] NCHAR(50) NOT NULL
		,[ModelFullName] NCHAR(50) NOT NULL
		,[Country] NCHAR(50) NOT NULL
		CONSTRAINT AK_Tandenborstel UNIQUE KEY (Manufacturer, Model)
	)

1 veel relatie: 1 record in een tabel komt overeen met veel andere records uit een andere tabel.
Een foreign key kan toegevoegd worden aan de veel tabel en verwijst naar de 1 tabel

Database normaalvormen:

1NF
	1) Elke record heeft 1 value (atomicity).
	2) Elke record in een kolom moet gelijke data hebben vb: enkel namen in de "names" kolom opslaan.
	3) De volgorde van de kolommen maakt niet uit.
	4) Elke Kolom moet eem unieke naam hebben.
	5) Geen herhalende groepen vb: telefoon nummer 1 en telefoon nummer 2. (niet echt een regel maar een goede practice)

2NF
	1) Moet aan alle regels van de 1NF voldoen.
	2) Er mag geen partial dependency zijn. Een niet-primaire kolommen moeten afhangen van elke kolom uit de primaire sleutel.

3NF
	1) Moet aan alle regels van de 2NF voldoen.
	2) Er mag geen transitive dependency zijn. Een niet primaire kolom moet direct afhankelijk zijn van de primaire sleutel en niet van een andere niet-primaire kolom die afhankelijk is van de sleutel.

Eind opdracht zie wiki

"IDENTITY" kan je toevoegen aan een kolom, deze wordt dan automatisch ingevuld wanneer er een nieuwe record komt die deze kolom niet specifiek invuld. (een teller).
Standaard is het increment 1 (gaat dus met 1 omhoog).
Identity seed is de waarde waar het begint te tellen. 

SQL database maken:

1) Maak een nieuw project sql project in WGM

2) "Build" bouwt het project.

3) "Publisch" exporteert deze naar een databank. 
	"Generate script" zal het script om deze databank te maken genereren en tonen.\
		Hier bekijke je het script en kan je het nog eventueel aanpassen.
	"Publish" zal uiteindelijk het script uitvoeren.

Om een project aan te passen voer je ook dezelfde stappen uit. (maak je script, "build" je script, controleer je script, "publish" je script)

Tabels maken in een Database:
Ofwel rechtermuisknop in je Server object explorer -> add table
Ofwel via een query op de database zelf.

Sql script maken via sql server management studio:
Klik rechts op de database -> tasks -> generate scripts...
Volg de wizard
Kies de volledige database of sla enkele items over.
Zet alles in 1 bestand en let goed op de directory waar het bestand geplaatst wordt.
Klik op advanced
Types of data and script, kies schema en data.
Done

Transacties: een opvolging van 1 of meerdere statements (ACID = AtomicConsistentIsolatedDurable)
1) Atomisch: Meerdere statments in een transactie worden altijd als 1 uitgevoerd. Er is geen tijdens de transactie, enkel een voor en een na.
2) Consistent: Een statement kan de database niet invalid maken (bv een record maar half invullen)
3) Isolated: Tegelijk uitvoeren van een transactie (meerdere personenen die op dezelfde database werken) kan niet, deze worden altijd na elkaar uitgevoerd. De ene transactie ondervindt geen invloed van de andere.
4) Durable: Eenmaal de transactie is uitgevoerd, blijft het effect bestaan (zelfs na stroomuitval of onderbreking, aanwezig in alle databank systemen). bv wanneer een transactie uit 4 statements bestaat zullen alle 4 altijd uitgevoerd worden, nooit 2 wel en 2 niet bv. 

Transacties kunnen geschreven worden tussen de keywords:
	BEGIN TRANSACTION

	COMMIT
Met ROLLBACK kan je een statement in een transactie ongedaan maken, meestal vooraf gegaan door een predikaat zoals IF.
Met DECLARE kan je argumenten meegeven in een transactie (zowel gedeclareerde als ongedeclareerde variabellen).
	DECLARE @Naam varchar(100) = 'Diederik' 
	DECLARE @Achternaam varchar(100)
Deze argumenten aanroepen doe je met @.
Met SAVE TRANSACTION kan je een safe-point instellen zodat je kan terugkeren naar dat punt in de transactie, zo moet je niet de hele transactie ongedaan maken met ROLLBACK
	SAVE TRANSACTION safePointNaam

	ROLLBACK TRANSACTION safePointNaam

Procedure:Een deel statements opslaan om te hergebruiken.(een functie in sql)
Te vinden onder Databases > Database > Programmability > Stored Procedures
	CREATE PROCEDURE [dbo].procedurenaam
		eventuele argumenten
	AS
		de SQL-statements
	RETURN 0
Procedures kun je aanroepen dmv: 
	EXEC procedurenaam 'Parameter1', 'Parameter2'

Sequence: Een teller die met een bepaalde waarde begint en een bepaalde waarde omhoog gaat.
Bij een IDENTITY wordt er een achterliggende sequence aangemaakt.

Index: een naam die op een tabel of een view gedefineerd kan worden op basis van 1 of meerdere kolommen.
Dit wordt gebruikt wanneer je tabel traag begint te worden. Zo kan je werken met een beperkt aantal kolommen, wanneer je tabel te groot is of regelmatig geraadpleegt wordt.

Trigger: Kan toegevoegd worden op een tabel om bepaalde logica bij het deleten, inserten of updaten van data uit te voeren.

Subqueries kunnen gebruikt worden om een select op een select te doen, herkenbaar aan (NOT) IN, = ANY, en = ALL in de WHERE clause.
IN = 
= ANY = minstens 1 van de waarden uit het resultaat van de daaropvolgende select. kan ook < ANY, > ANY of <> ANY zijn (niet gelijk aan)
= ALL = Alle waarden uit het daaropvolgende resultaat van de daaropvolgende select> kan ook < ALL, > ALL of <> ALL zijn (niet gelijk aan)
Niet gelinkte subquery kan onafhankelijk uitgevoerd worden.
Kan gebruikt worden ipv een JOIN bv:
	(Met Join)
	SELECT c.FirstName, c.LastName
	FROM Customer c join Employee e
	ON c.LastName = e.LastName
	
	(Met Subquery)
	SELECT FirstName, LastName
	FROM Customer
	WHERE LastName = ANY (
		SELECT LastName
		FROM Employee
		)	

COLLATION = een bepaalde rangschikking van karakters, dit kan ingesteld worden per kollom of per databank.	

Post deployment script: Gegevens toevoegen/verwijderen in je tabellen.
Post deployment scripts moet je meerdere keren kunnen uitvoeren en hetzelfde resultaat krijgen.
De volgorde is van belang mits je met foreign keys werkt bv:
	Je hebt een database met 3 tabellen A,B,C waarvan C afhankelijk is van B, en B afhankelijk is van A.
	Een record moet eerst in C bestaan voor je in B kan referen naar dat record.
	Dan pas kan je in A een record toevoegen met een referentie naar dat record in B.
	Voor verwijderen werk je in omgekeerde volgorde. A -> B -> C.



Voorbeeld vragen dml examen:

/*

(3 punten)

Verwijder alles uit de tabel InvoiceLine.
--
Pas op! Andere vragen gaan er niet van uit dat er geen data in die tabel zit.
Zorg dus dat je de database kan herstellen
of het verwijderen ongedaan kan maken met rollback.

*/

/*

Geef de volgende informatie per unieke klant:

* voornaam (Customer.FirstName)
* familienaam (Customer.LastName)
* AantalFacturen: het aantal facturen
(records in tabel Invoice) per klant
* [Totaal uitgaven klant]: som van de totaalprijzen
van de facturen van de klant
* [Gemiddelde totaalprijs per factuur]: de gemiddelde
totaalprijs op de factuur per klant

Sorteer de resultaten volgens totale uitgaven
van elke klant. De klanten die meer gespendeerd
hebben komen voor de klanten die minder gespendeerd
hebben.

Hints:

* Facturen kan je vinden in de tabel Invoice
* De totaalprijs van een factuur kan je vinden
in de kolom Invoice.Total

*/

/*

Geef de FirstName, de LastName en Title kolommen
van de tabel Employee voor de employees die geen
vertegenwoordiger zijn voor klanten en die geen
"entry level" werknemers zijn.

Een "entry level" employee is een employee waarvoor
er geen andere employee is die ernaar verwijst
via de kolom ReportsTo.

Een vertegenwoordiger van een klant kan je vinden
via de foreign key FK_CustomerSupportRepId.

Hou geen rekening met klanten waarvoor SupportRepId
onbekend (dus NULL) is; dus laat die klanten weg.

*/

OPLOSSINGEN OEFENINGEN:

SELECT met en zonder FROM

Bereken de waarde van 386 keer 418 min 5443
Oplossing

SELECT 386*418-5443

Bereken de vierkantswortel van 2 (functie SQRT)
Oplossing

SELECT SQRT(2)

Geef de vierkantswortel van 2, de vierkantswortel van 30, de som van beide vierkantsworels en de vierkantswortel van de som van beiden.
Oplossing

SELECT SQRT(2), SQRT(30),
  SQRT(2) + SQRT(30),
  SQRT(2+30)

Welk jaar zijn we nu?
Tip: gebruik current_timestamp en de functie datepart
Oplossing

SELECT DATEPART(yyyy, current_timestamp)

Welk jaar zijn we over 1000 dagen?
Tip: je kan een aantal dagen optellen bij current_timestamp
Oplossing

SELECT DATEPART(yyyy, current_timestamp+1000)

Toon alle gegevens in de tabel dbo.Artist
Oplossing

SELECT *
FROM dbo.Artist

Toon enkel de namen van de verschillende artiesten (tabel Artist)
Oplossing

SELECT DISTINCT Name
FROM dbo.Artist

Geef voornaam, familienaam en land van alle klanten (tabel customer).
Zorg dat de kolomnaam in het Nederlands wordt weergegeven
Oplossing

SELECT voornaam = FirstName, -- alias met =, als prefix
 LastName familienaam, -- alias als suffix
 Country AS land -- alias met AS
FROM Customer

Geef de landen waarin de klanten wonen (kolom country in tabel customer).
Zorg dat elk land maar 1 keer in het resultaat voorkomt
Oplossing

SELECT DISTINCT country
FROM Customer

Hoeveel klanten zijn er (tabel customers)?
Oplossing

SELECT count(*)
FROM Customer

In hoeveel verschillende landen wonen de klanten?
Oplossing

SELECT count(DISTINCT Country)
FROM Customer

Bekijk de documentatie van CASE: https://docs.microsoft.com/en-us/sql/t-sql/language-elements/case-transact-sql? view=sql-server-2017
Maak van de tabel Customer een overzicht met kolommen voornaam, familienaam en plaats.
Voornaam en familienaam zijn aliassen van de FirstName en LastName kolommen
Plaats is het land (Country) als dat niet gelijk is aan USA of Canada.
Als het land gelijk is aan 'USA', geef dan State + ' (US)' weer.
Als het land Canada is, geef dan Country + ' (' + State + ')' weer.
Oplossing

SELECT FirstName voornaam,
 LastName familienaam,
 CASE Country
  WHEN 'USA'
   THEN [State] + ' (US)'
  WHEN 'Canada'
   THEN Country + ' (' + [State] + ')'
  ELSE Country
  END AS plaats
FROM Customer

Bekijk de documentatie van CASE: https://docs.microsoft.com/en-us/sql/t-sql/language-elements/case-transact-sql? view=sql-server-2017
Maak van de tabel Customer een overzicht met kolommen voornaam, familienaam en plaats.
Voornaam en familienaam zijn aliassen van de FirstName en LastName kolommen
Plaats is het land (Country) als State NULL is.
Als State niet NULL is, geef je "State (Country)" weer
Oplossing

SELECT FirstName voornaam,
 LastName familienaam,
 CASE 
  WHEN [State] IS NULL
   THEN Country
  ELSE [State] + ' (' + Country + ')'
  END AS plaats
FROM Customer

Oefening met COALESCE: https://docs.microsoft.com/en-us/sql/t-sql/language-elements/coalesce-transact-sql?view=sql-server-2017
Geef van de tabel Customer de landen (Country) en deelstaten of provincies (State) waar klanten wonen.
Als er voor een land geen deelstaat of provincie is (dus als de waarde in die kolom NULL is), geef dan '(heel het land)' weer in plaats van NULL.
Oplossing

SELECT DISTINCT Country AS land,
 COALESCE([State], '(heel het land)')
FROM Customer

Oefening met NULLIF: https://docs.microsoft.com/en-us/sql/t-sql/language-elements/nullif-transact-sql?view=sql-server-2017
Gebruik NULLIF om NULL weer te geven in kolom "zelfde"
Gebruik NULLIF met 2 verschillende waarden om 'anders' weer te geven in kolom "verschillend"
Oplossing

SELECT nullif(1, 1) zelfde,
 nullif('anders', 'x') verschillend

SELECT met WHERE

Geef de voornaam en familienaam van alle klanten die in België wonen
Oplossing

SELECT firstname,
 lastname
FROM customer
WHERE country = 'Belgium'

Geef voornaam en familienaam van alle klanten die in België of Frankrijk wonen
Gebruik OR
Oplossing

SELECT firstname,
 lastname
FROM customer
WHERE country = 'Belgium' or country = 'France'

Geef voornaam en familienaam van alle klanten die in België of Frankrijk wonen
Gebruik geen OR, maar wel IN
Oplossing

SELECT firstname,
 lastname
FROM customer
WHERE country IN('Belgium', 'France')

Geef de naam van de tracks die minder dan 2 minuten duren. Geef ook de duurtijd van de track in minuten en seconden (tot 3 cijfers na de komma). Gebruik aparte kolommen voor minuten en seconden, of probeer er een string van te maken in de vorm '00:00.000' Je kan gebruik maken van de kolom Milliseconds om de tijd van een track in milliseconden te weten.
Oplossing

SELECT name,
 FLOOR(Milliseconds / 60000) minuten,
 FLOOR((Milliseconds % 60000) / 1000) seconden,
 Milliseconds % 1000 millis
FROM Track
WHERE Milliseconds < 2 * 60 * 1000

Geef de naam en de duurtijd van de tracks die tussen de 2 en de 3 minuten duren. Gebruik het sleutelwoord BETWEEN
Oplossing

SELECT name,
 Milliseconds / 1000 duurtijdSeconden
FROM Track
WHERE Milliseconds BETWEEN 2 * 60 * 1000
  AND 3 * 60 * 1000

Geef de naam van de tracks die langer dan 3 minuten duren en tussen 1.5 en 2.5 dollar kosten.
Oplossing

SELECT name
FROM Track
WHERE Milliseconds > 3 * 60 * 1000
	AND UnitPrice BETWEEN 1.5 AND 2.5

Geef het aantal tracks en het aantal verschillende albums die tracks bevatten waarvoor de componist (kolom composer) bekend is. Gebruik enkel de tabel Track om het antwoord te vinden. Gebruik de kolomaliassen aantalTracks en aantalAlbums om duidelijk weer te geven wat werd geteld.
Oplossing

SELECT count(*) aantalTracks,
 count(DISTINCT albumId) aantalAlbums
FROM Track
WHERE Composer IS NOT NULL

SELECT met JOINs

Hoeveel artiesten zijn er die geen album hebben? Of minder specifiek verwoord: zijn er artiesten opgeslagen in de database waarvoor er geen album is? Los op met een outer join en met IS (NOT) NULL in de WHERE clause.
Oplossing

SELECT count(*)
FROM Artist
LEFT OUTER JOIN Album ON Artist.ArtistId = Album.ArtistId
WHERE album.Title IS NULL

Maak een overzicht van albumnaam en artiestnaam voor alle albums die terug te vinden zijn in de Chinook database.
Oplossing

SELECT al.Title album,
 art.Name artiest
FROM Album al
JOIN Artist art ON al.ArtistId = art.ArtistId

Maak voor alle tracks een overzicht van tracknaam, albumnaam, artiestnaam, naam mediatype, naam genre. Hou er rekening mee dat een track niet altijd een genre heeft. Een track heeft ook niet altijd een album.
Oplossing

SELECT t.Name track,
 a.Title album,
 art.Name artiest,
 m.Name mediatype,
 g.Name genre
FROM Track t
LEFT OUTER JOIN Album a ON t.AlbumId = a.AlbumId
LEFT OUTER JOIN Artist art ON a.ArtistId = art.ArtistId
LEFT OUTER JOIN MediaType m ON t.MediaTypeId = m.MediaTypeId
LEFT OUTER JOIN Genre g ON t.GenreId = g.GenreId

SELECT met GROUP BY en HAVING

Maak een overzicht van de albums met titel, naam artiest, aantal tracks, totale duur van het album (functie SUM), gemiddelde duur per track (functie AVG) en een door komma's gescheiden lijst van de tracknamen. Gebruik de functie STRING_AGG om de lijst met tracks in 1 cel van het resultaat te maken.
Oplossing

SELECT a.Title album,
 (
  SELECT name
  FROM artist
  WHERE ArtistId = a.ArtistId
  ) [naam artiest],
 count(t.trackId) [aantal tracks],
 sum(t.milliseconds) / 60000 [minuten volledig album],
 avg(t.milliseconds) / 60000.0 [minuten per track gemiddeld],
 string_agg(t.name, ', ') [tracks in album]
FROM album a
JOIN track t ON a.AlbumId = t.AlbumId
GROUP BY a.Title,
 a.ArtistId

Alternatieve oplossing:

SELECT 
	Album.Title,
	Artist.Name, Count(*) [aantal tracks],
	SUM(Track.Milliseconds),
	AVG(Track.Milliseconds)
	,string_agg(Track.Name, ',' )
FROM Album JOIN Artist ON Artist.ArtistId = Album.ArtistId
		LEFT JOIN Track ON TRack.AlbumId = Album.AlbumId
GROUP BY
	Album.AlbumId,
	Album.Title,
	Artist.Name

Geef per playlist de naam en het aantal tracks. Je hebt zowel een JOIN als een GROUP BY nodig.
Oplossing

SELECT p.name,
 count(*) [Aantal tracks]
FROM Playlist p
JOIN PlaylistTrack t ON p.PlaylistId = t.PlaylistId
GROUP BY p.Name

SELECT met de set operatoren UNION EXCEPT INTERSECT

Maak een lijst van alle voornamen die zowel de voornaam van een Employee als van een Customer zijn. Gebruik daarvoor 2 queries die je combineert met INTERSECT.
Oplossing

SELECT firstname
FROM Employee

INTERSECT

SELECT firstname
FROM Customer

Maak een lijst van alle voornamen van Customers die geen voornaam zijn van een Employee. Gebruik daarvoor 2 queries die je combineert met EXCEPT.
Oplossing

SELECT firstname
FROM Customer

EXCEPT

SELECT firstname
FROM Employee

Maak een lijst van alle voornamen van Customers die ook de voornaam zijn van een Employee. Gebruik daarvoor 2 queries die je combineert met INTERSECT
Oplossing

-- (zelfde vraag als een eerdere vraag)

Geef de voornamen van zowel employees als customers. Gebruik UNION zodanig dat elke voornaam maar 1 keer voorkomt.
Oplossing

SELECT firstname
FROM Customer

UNION

SELECT firstname
FROM Employee

Geef de voornamen van zowel employees als customers. Gebruik UNION zodat voornamen die meerdere keren voorkomen ook meerdere keren in het resultaat voorkomen.
Oplossing

SELECT firstname
FROM Customer

UNION ALL

SELECT firstname
FROM Employee

Parameters en DECLARE en SET

Probeer de volgende query uit DECLARE dient om parameters (die beginnen met @) te declareren SET dient om een waarde aan een parameter toe te kennen De parameters kunnen op bepaalde plaatsen in DML statements gebruikt worden

DECLARE @foo VARCHAR(100);

SET @foo = 'foobar';

SELECT @foo

Oplossing

-- er is geen oplossing, gewoon uitvoeren wat er staat

Voer volgend statement uit. Het lukt niet om dit uit te voeren. Geen paniek. Lees de foutmeldingen. Begrijp je wat het probleem is?

DECLARE @landEnStaat VARCHAR(100)

SET @landEnStaat = CASE STATE
  WHEN 'onbekend'
   THEN Land
  ELSE STATE + ' (' + Land + ')'
  END

SELECT @landEnStaat
FROM Chinook.dbo.Customer

Oplossing

-- Een parameter kan een waarde toegewezen krijgen,
-- niet een uitdrukking met verwijzingen die nog
-- niet gedeclareerd zijn.

Geef de vierkantswortel van 2, de vierkantswortel van 30, de som van beide vierkantsworels en de vierkantswortel van de som van beiden. Declareer parameters in plaats van 2 en 30 letterlijk te gebruiken. Zet de waarde van de parameters op 2 en 30 en voer uit. Probeer ook eens uit met andere waarden.
Oplossing

DECLARE @twee INT,
 @dertig INT

SET @twee = 2
SET @dertig = 30

SELECT SQRT(@twee),
 SQRT(@dertig),
 SQRT(@twee) + SQRT(@dertig),
 SQRT(@twee + @dertig)

Subqueries in WHERE met IN ANY ALL

Hoeveel artiesten zijn er die geen album hebben? Of minder specifiek verwoord: zijn er artiesten opgeslagen in de database waarvoor er geen album is? Los op met een ANY subquery.
Oplossing

SELECT *
FROM Artist a
WHERE NOT a.ArtistId = ANY (
  SELECT ArtistId
  FROM Album
  )

Geef de voornaam en familienaam van alle klanten (Customer) waarvoor er een medewerker (Employee) bestaat met dezelfde voornaam. Los op met een niet-gelinkte subquery.
Oplossing

SELECT firstname,
 lastname
FROM Customer
WHERE Customer.FirstName = ANY (
  SELECT firstname
  FROM employee
  )

Geef de voornaam en familienaam van alle klanten (Customer) waarvoor er een medewerker (Employee) bestaat met dezelfde voornaam. Los op met een niet-gelinkte subquery, gedeclareerd in een parameter (dus met DECLARE en SET).
Oplossing

DECLARE @firstname TABLE (FirstName VARCHAR(100))

INSERT INTO @firstname
SELECT firstname
FROM Employee

SELECT firstname
	,lastname
FROM Customer
WHERE firstname IN (
		SELECT *
		FROM @firstname
		)

INSERT UPDATE en DELETE

Gebruik letterlijke waarden in een INSERT statement om een record met je eigen naam toe te voegen aan de tabel Customers. Vul alleen de waarden in die nodig zijn.
Oplossing

INSERT INTO Customer (
 CustomerId,
 FirstName,
 LastName,
 Email
 )
VALUES (
 - 999,
 'Foo',
 'Vandebar',
 'foo@fooobar.com'
 )

Declareer parameters en initialiseer de waarde ervan om te gebruiken in een insert statement waarmee je jezelf toevoegt aan de tabel Employee.
Oplossing

DECLARE @firstname VARCHAR(100),
 @lastname VARCHAR(100)
DECLARE @employeeId INT

SET @firstname = 'Tijs'
SET @lastname = 'Boerke'
SET @employeeId = - 99

INSERT INTO Employee (
 FirstName,
 LastName,
 EmployeeId
 )
VALUES (
 @firstname,
 @lastname,
 @employeeId
 )

Voer een aankoop uit: maak factuur (Invoice) met een aangekocht artikel (InvoiceLine). Je hebt hiervoor 2 insert statements nodig.
Oplossing

DECLARE @prijs DECIMAL(10,2) = 3.99

BEGIN TRANSACTION

INSERT INTO [dbo].[Invoice] (
	[InvoiceId]
	,[CustomerId]
	,[InvoiceDate]
	,[BillingAddress]
	,[BillingCity]
	,[BillingState]
	,[BillingCountry]
	,[BillingPostalCode]
	,[Total]
	)
VALUES (
	1000
	,58
	,N'2013-12-22 00:00:00'
	,N'12,Community Centre'
	,N'Delhi'
	,NULL
	,N'India'
	,N'110017'
	,@prijs
	)

INSERT INTO [dbo].[InvoiceLine] (
	[InvoiceLineId]
	,[InvoiceId]
	,[TrackId]
	,[UnitPrice]
	,[Quantity]
	)
VALUES (
	9999
	,1000
	,16
	,@prijs
	,1
	)

COMMIT TRANSACTION

Schrijf een DELETE statement waarmee je alle Artists verwijdert die geen album hebben.
Oplossing

DELETE
FROM Artist
WHERE Artist.ArtistId NOT IN (
  SELECT ArtistId
  FROM Album
  )

Verhoog de prijs van 0.99 naar 1.49 voor alle tracks die 0.99 kosten en langer dan 5 minuten duren (UnitPrice in de tabel Track).
Oplossing

UPDATE Track
SET UnitPrice = 1.49
WHERE UnitPrice = 0.99 AND Milliseconds > 5 * 60 * 1000

ORDER BY en TOP

Geef de voor de tracks het aantal minuten (gebruik de FLOOR functie om het aantal minuten naar beneden af te ronden). Geef ook de naam en de prijs van de track. Selecteer enkel de tracks die minder dan 10 minuten duren. Orden de tracks aflopend op aantal minuten (afgerond naar beneden), en daarna oplopend op de prijs per track.
Oplossing

SELECT FLOOR(Milliseconds / 60000) minuten,
 Name,
 UnitPrice
FROM Track
WHERE Milliseconds < 10 * 60 * 1000
ORDER BY minuten DESC,
 UnitPrice ASC
-- merk op dat een kolomalias uit de SELECT
-- clause kan gebruikt worden in de ORDER BY
-- clause.

Geef de voor de tracks het aantal minuten (gebruik de FLOOR functie om het aantal minuten naar beneden af te ronden). Geef ook de naam en de prijs van de track. Selecteer enkel de tracks die minder dan 10 minuten duren. Orden de tracks aflopend op aantal minuten (afgerond naar beneden), en daarna oplopend op de prijs per track. Gebruik SELECT TOP om enkel de eerste 100 tracks weer te geven.
Oplossing

SELECT TOP 100
 FLOOR(Milliseconds / 60000) minuten,
 Name,
 UnitPrice
FROM Track
WHERE Milliseconds < 10 * 60 * 1000
ORDER BY minuten DESC,
 UnitPrice ASC

Geef de voor de tracks het aantal minuten (gebruik de FLOOR functie om het aantal minuten naar beneden af te ronden). Geef ook de naam en de prijs van de track. Selecteer enkel de tracks die minder dan 10 minuten duren. Orden de tracks aflopend op aantal minuten (afgerond naar beneden), en daarna oplopend op de prijs per track. Gebruik SELECT TOP in combinatie met DECLARE en SET om enkel de eerste @aantal tracks weer te geven. Gebruik ook DECLARE en SET om de maximum tracklengte in te stellen.
Oplossing

DECLARE @maxMinuten NUMERIC
DECLARE @aantalRecords INT

SET @aantalRecords = 25
SET @maxMinuten = 6

SELECT TOP (@aantalRecords) Milliseconds / 60000 minuten,
 Name,
 UnitPrice
FROM Track
WHERE Milliseconds < @maxMinuten * 60 * 1000
ORDER BY minuten DESC,
 UnitPrice ASC
